//
//  timing.cpp
//  Permutation
//
//  Created by Cyndaquil on 2020/10/20.
//

#include "timing.hpp"
#include "intermediate2perm.hpp"

#include <iostream>
#include <vector>
#include <time.h>
using namespace std;

vector<vector<double>> perm_time(unsigned int n){
    vector<vector<double>> times;
    clock_t start, end;
    vector<vector<int>> results;
    
    cout << "permutations generated by Dictionary method" << endl;
    vector<double> record;
    for(unsigned int i = 1; i < n; i++){
        start = clock();
        results = perm_dic_method(i+1); // start from 2
        end = clock();
        record.push_back((double) (end - start) / CLOCKS_PER_SEC);
    }
    times.push_back(record);
    
    cout << "permutations generated by Neighbor Swap method" << endl;
    record.clear();
    for(unsigned int i = 1; i < n; i++){
        start = clock();
        results = perm_nbh_method(n); // start from 2
        end = clock();
        record.push_back((double) (end - start) / CLOCKS_PER_SEC);
    }
    times.push_back(record);
    
    cout << "permutations generated by Increasing method" << endl;
    record.clear();
    for(unsigned int i = 1; i < n; i++){
        start = clock();
        results = perm_inc_method(i+1); // start from 2
        end = clock();
        record.push_back((double) (end - start) / CLOCKS_PER_SEC);
    }
    times.push_back(record);
    
    cout << "permutations generated by Decreasing method" << endl;
    record.clear();
    for(unsigned int i = 1; i < n; i++){
        start = clock();
        results = perm_dec_method(i+1); // start from 2
        end = clock();
        record.push_back((double) (end - start) / CLOCKS_PER_SEC);
    }
    times.push_back(record);
    
    
    cout << "permutations generated by Improved Increasing method" << endl;
    record.clear();
    for(unsigned int i = 1; i < n; i++){
        start = clock();
        results = perm_inc_sym_method(i+1); // start from 2
        end = clock();
        record.push_back((double) (end - start) / CLOCKS_PER_SEC);
    }
    times.push_back(record);
    
    
    cout << "permutations generated by Improved Decreasing method" << endl;
    record.clear();
    for(unsigned int i = 1; i < n; i++){
        start = clock();
        results = perm_dec_sym_method(i+1); // start from 2
        end = clock();
        record.push_back((double) (end - start) / CLOCKS_PER_SEC);
    }
    times.push_back(record);
    
    return times;
}
