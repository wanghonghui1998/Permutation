//
//  main.cpp
//  permutation
//
//  Created by Cyndaquil on 2020/10/17.
//

#include <iostream>
#include <vector>
#include <time.h>
#include "index2intermediate.hpp"
#include "intermediate2perm.hpp"
#include "perm2next.hpp"
#include "timing.hpp"

using namespace std;



int main( )
{
    
    int cmd;
    vector<vector<int>> results;
    int n = 5;
    clock_t start, end;
    
    while(1){
        cout << "(0)exit" << endl;
        cout << "(1)Dictionary Order Method" <<endl;
        cout << "(2)Dictionary Order Method with intermediate number" <<endl;
        cout << "(3)Increasing Radix Method" <<endl;
        cout << "(4)Symmetry-Inspired Increasing Radix Method" << endl;
        cout << "(5)Decreasing Radix Method" <<endl;
        cout << "(6)Symmetry-Inspired Decreasing Radix Method" << endl;
        cout << "(7)SJT Method" <<endl;
        cout << "(8)SJT Method with intermediate number" <<endl;
        cin >> cmd;
        switch (cmd) {
            case 0:
                return 0;
            case 1:
                cout << "=== Permutations generated by Dictionary Order Method ===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_dic_method_seq((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            case 2:
                cout << "=== Permutations generated by Dictionary Order Method with intermediate numbe r===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_dic_method((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            case 3:
                cout << "=== Permutations generated by Increasing Radix Method ===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_inc_method((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            case 4:
                cout << "=== Permutations generated by Symmetry-Inspired Increasing Radix Method ===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_inc_sym_method((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            case 5:
                cout << "=== Permutations generated by Decreasing Radix Method ===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_dec_method((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            case 6:
                cout << "=== Permutations generated by Symmetry-Inspired Decreasing Radix Method ===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_dec_sym_method((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            case 7:
                cout << "=== Permutations generated by SJT Method ===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_sjt_method_seq((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            case 8:
                cout << "=== Permutations generated by SJT Method with intermediate number ===" << endl;
                cout << "Pls input n: ";
                cin >> n;
                if(n<=0){
                    cout << "we need n > 0!" << endl;
                    break;
                }
                start = clock();
                results = perm_nbh_method((unsigned int)n);
                end = clock();
                for(int j = 0; j < results.size(); j++){
                    cout << "No. " << j+1 << ": ";
                    for(int i = 0; i < results[j].size(); i++){
                        cout << results[j][i] << ' ';
                    }
                    cout << endl;
                }
                cout <<"=== Using time: " << (double) (end - start) / CLOCKS_PER_SEC <<"s ===" << endl;
                cout << endl;
                break;
            default:
                cout << "=== Not Implemented! ===" << endl;
                break;
        }
    }
       
    
    /*
    vector<vector<int>> results;
    vector<vector<int>> results_sym;
    unsigned int n = 5;

    
    
    clock_t start, end;
    start = clock();
    results = perm_nbh_method(n);
    results_sym = perm_sjt_method_seq(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
    for(int j = 0; j < results.size(); j++){
        
        
        for(int i = 0; i < results_sym[j].size(); i++){
            cout << results_sym[j][i] << ' ';
        }
        cout << endl;
    }
    
    
    cout << "permutations generated by Decreasing method" << endl;
    start = clock();
    results = perm_dec_method(n);
    results_sym = perm_dec_sym_method(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
    for(int j = 0; j < results.size(); j++){
        for(int i = 0; i < results[j].size(); i++){
            cout << results[j][i] << ' ';
            if(results[j][i] != results_sym[j][i])
                cout << "error" << endl;
        }
        cout << endl;
        for(int i = 0; i < results_sym[j].size(); i++){
            cout << results_sym[j][i] << ' ';
        }
        cout << endl;
    }
     */
    
     
    
    
     

    return 0;
}
