//
//  main.cpp
//  permutation
//
//  Created by Cyndaquil on 2020/10/17.
//

#include <iostream>
#include <vector>
#include <time.h>
#include "index2intermediate.hpp"
#include "intermediate2perm.hpp"
#include "timing.hpp"

using namespace std;



int main( )
{
    vector<vector<int>> results;
    unsigned int n = 3;
    vector<vector<double>> t = perm_time(n);
    for(int j = 0; j < t.size(); j++){
        for(int i = 0; i < t[j].size(); i++){
            cout << t[j][i] << ' ';
        }
        cout << endl;
    }
    /*
    clock_t start, end;
    cout << "permutations generated by Dictionary method" << endl;
    start = clock();
    results = perm_dic_method(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
//    for(int j = 0; j < results.size(); j++){
//        for(int i = 0; i < results[j].size(); i++){
//            cout << results[j][i] << ' ';
//        }
//        cout << endl;
//    }
    
    cout << "permutations generated by Neighbor Swap method" << endl;
    start = clock();
    results = perm_nbh_method(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
//    for(int j = 0; j < results.size(); j++){
//        for(int i = 0; i < results[j].size(); i++){
//            cout << results[j][i] << ' ';
//        }
//        cout << endl;
//    }
    cout << "permutations generated by Increasing method" << endl;
    
    start = clock();
    results = perm_inc_method(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
//    for(int j = 0; j < results.size(); j++){
//        for(int i = 0; i < results[j].size(); i++){
//            cout << results[j][i] << ' ';
//        }
//        cout << endl;
//    }
    
    cout << "permutations generated by Decreasing method" << endl;
    start = clock();
    results = perm_dec_method(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
//    for(int j = 0; j < results.size(); j++){
//        for(int i = 0; i < results[j].size(); i++){
//            cout << results[j][i] << ' ';
//        }
//        cout << endl;
//    }
    
    cout << "permutations generated by Improved Increasing method" << endl;
    start = clock();
    results = perm_inc_sym_method(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
//    for(int j = 0; j < results.size(); j++){
//        for(int i = 0; i < results[j].size(); i++){
//            cout << results[j][i] << ' ';
//        }
//        cout << endl;
//    }
    
    cout << "permutations generated by Improved Decreasing method" << endl;
    start = clock();
    results = perm_dec_sym_method(n);
    end = clock();
    cout << "time: " << (double) (end - start) / CLOCKS_PER_SEC << endl;
//    for(int j = 0; j < results.size(); j++){
//        for(int i = 0; i < results[j].size(); i++){
//            cout << results[j][i] << ' ';
//        }
//        cout << endl;
//    }
     */
    
    
    
    
    
    
    
    /*
    for (int idx = 0; idx < factorial(n); idx ++){
         vector<int> intermediate_inc = idx2intermediate_inc_method(n, idx);
         vector<int> result_inc;
         cout << "No."<< idx + 1 << " permutations generated by increasing method" << endl;
         result_inc = intermediate2perm_inc_method(intermediate_inc);
         for(int i = 0; i < result_inc.size(); i++){
             cout << result_inc[i] << ' ';
         }
         cout << endl;
     }
    cout << endl;
    for (int idx = 0; idx < factorial(n); idx ++){
        vector<int> result_dec;
        vector<int> intermediate_dec = idx2intermediate_dec_method(n, idx);
        cout << "No."<< idx + 1 << " permutations generated by decreasing method" << endl;
        result_dec = intermediate2perm_dec_method(intermediate_dec);
        for(int i = 0; i < result_dec.size(); i++){
            cout << result_dec[i] << ' ';
        }
        cout << endl;
    }
     */
     
     

    return 0;
}
